generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(uuid())
  username            String      @unique
  email               String
  password_hash       String
  role                String?
  verification_token  String?
  email_verified_at   DateTime?
  reset_token         String?
  reset_token_expires DateTime?
  created_at          DateTime    @default(now())
  updated_at          DateTime?   @updatedAt
  deleted_at          DateTime?
  created_by          String?
  updated_by          String?
  actionlogs          ActionLog[]
  changelogs          ChangeLog[]
  sessions            Session[]
  roleDetail          Role?       @relation(fields: [role], references: [id])

  @@map("m_user")
}

model Session {
  id         String    @id @default(uuid())
  id_user    String
  expires_at DateTime
  ip_address String?
  user_agent String?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  user       User      @relation(fields: [id_user], references: [id])

  @@map("s_session")
}

model ActionLog {
  id         String   @id @default(uuid())
  action     String
  ip_address String?
  user_agent String?
  metadata   Json?
  created_at DateTime @default(now())
  id_user    String?
  user       User?    @relation(fields: [id_user], references: [id])

  @@map("s_actionlog")
}

model ChangeLog {
  id            String   @id @default(uuid())
  table_name    String
  record_id     String
  action        String
  previous_data Json?
  new_data      Json
  created_at    DateTime @default(now())
  id_user       String?
  user          User?    @relation(fields: [id_user], references: [id])

  @@map("s_changelog")
}

model Role {
  id         String    @id @unique
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  created_by String?
  updated_by String?
  user       User[]

  @@map("m_role")
}
